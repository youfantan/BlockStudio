cmake_minimum_required(VERSION 3.16.3)
project(BlockStudio)
#xdiff settings
INCLUDE ( CheckFunctionExists )
INCLUDE ( CheckIncludeFiles )
CHECK_INCLUDE_FILES ( dlfcn.h HAVE_DLFCN_H )
CHECK_INCLUDE_FILES ( inttypes.h HAVE_INTTYPES_H )
CHECK_INCLUDE_FILES ( limits.h HAVE_LIMITS_H )
CHECK_INCLUDE_FILES ( memory.h HAVE_MEMORY_H )
CHECK_INCLUDE_FILES ( stdint.h HAVE_STDINT_H )
CHECK_INCLUDE_FILES ( stdio.h HAVE_STDIO_H )
CHECK_INCLUDE_FILES ( stdlib.h HAVE_STDLIB_H )
CHECK_INCLUDE_FILES ( strings.h HAVE_STRINGS_H )
CHECK_INCLUDE_FILES ( string.h HAVE_STRING_H )
CHECK_INCLUDE_FILES ( sys/stat.h HAVE_SYS_STAT_H )
CHECK_INCLUDE_FILES ( sys/types.h HAVE_SYS_TYPES_H )
CHECK_INCLUDE_FILES ( unistd.h HAVE_UNISTD_H )
CHECK_FUNCTION_EXISTS ( free HAVE_FREE )
CHECK_FUNCTION_EXISTS ( malloc HAVE_MALLOC )
CHECK_FUNCTION_EXISTS ( memchr HAVE_MEMCHR )
CHECK_FUNCTION_EXISTS ( memcmp HAVE_MEMCMP )
CHECK_FUNCTION_EXISTS ( memcpy HAVE_MEMCPY )
CHECK_FUNCTION_EXISTS ( memset HAVE_MEMSET )
CHECK_FUNCTION_EXISTS ( realloc HAVE_REALLOC )
CHECK_FUNCTION_EXISTS ( strlen HAVE_STRLEN )
#project settings
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/build/bin)
add_definitions(-DCURL_STATICLIB -DBUILD_LIBCURL -DWINDOWS)
add_compile_options(-fexec-charset=GBK -finput-charset=UTF-8)
set(CMAKE_CXX_STANDARD 14)
include_directories(third-party/include)
include_directories(config)
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/config/xdiff_config.h.in third-party/include/xdiff_config.h)
link_directories(lib)
set(SRC_LIST java_details.o resource_list.o third_party_licence.o cacert.o src/RangedDownload.cc src/RangedDownload.h src/Utils.cc src/Utils.h src/ApplicationEventBus.cc src/ApplicationEventBus.h src/Options.cc src/Options.h src/Localizer.cc src/Localizer.h src/Core.cc src/Core.h src/MallocAllocator.hpp src/PatchDecoder.hpp src/PatchEncoder.hpp src/GlobalVars.cc src/GlobalVars.h src/Config.h src/compile_config.cc src/TaskQueue.cpp src/TaskQueue.h)
set(THIRD_PARTY_LIST third-party/src/ioapi.c third-party/src/unzip.c)
#unit test
add_executable(BSUnitTest ${SRC_LIST} ${THIRD_PARTY_LIST} tests/TestsEntry.cc tests/UnitTest.hpp)
target_link_libraries(BSUnitTest xdiff z curl ssl crypto Crypt32 ws2_32 wldap32 bz2 microtar)
#generate release
add_executable(BlockStudio ${SRC_LIST} ${THIRD_PARTY_LIST} src/main_win.cc)
target_link_libraries(BlockStudio xdiff z curl ssl crypto Crypt32 ws2_32 wldap32 bz2 microtar)
file(COPY ${CMAKE_SOURCE_DIR}/lang DESTINATION ${EXECUTABLE_OUTPUT_PATH})
file(COPY ${CMAKE_SOURCE_DIR}/resources/blockstudio.config DESTINATION ${EXECUTABLE_OUTPUT_PATH})